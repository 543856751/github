git与github使用
版本控制工具需要具有的功能
1.多人可以共同修改数据 2.数据备份 3.权限控制 4.可以接收团队外开发贡献者提供的代码进行审核
版本控制工具  集成式（多个客户端与服务器进行交互，如果服务器坏了以前的数据都没有了）、分布式（在本地进行完整的版本控制）
git与linux命令完全兼容，完整性保证（哈希值，同一个数据对应的哈希值是一定的，数据变了哈希值也会给改变），在本地完成，不需要联网
尽可能添加数据，而不是删除或者修改数据！
git在本地的结构 工作区（写代码） 暂存区（临时存储） 本地库（存放历史版本）
git add添加到暂存区 git commit提交到本地库
git代码托管中心(维护远程库)
 1.局域网环境 gitlab 自己搭建
 2.外网环境 码云、github
 本地库和远程库如何交互   进行协同开发
主管理者通过push把本地项目文件上传至远程库，工作人员可以通过克隆下载文件，通过push加入团队后也可以上传文件，主管理者通过pull来下载修改后的文件
远程库也可以复制给其他工作人员
git命令 
本地库命令：
git init 初始化 创建一个空的.git目录    设置签名 形式 用户名： Email地址：作用：区分不同的开发人员
命令：
cat 查看文档信息
项目级别，仅在当前本地库范围有效  git config user.name wangfeng  git config user.email 543856751@qq.com
系统用户级别 登录当前操作系统的用户范围   级别优先级 ，优先选择 git config --global user.name wangfeng
git status 查看状态  branch分支
git 自动使用vim编辑器 按：
git commit -m "注释内容（不需要再进入vim编译器了）" 文件名称
git log 版本记录  
git log --pretty=online   git log --online   git reflog查看版本
通过HEAD控制指针回到前后的不同版本
三种方式　基于索引值操作最好！　　git reset --hard 索引值（一部分哈希值） 
--hard   --mix   --soft
按着索引值应用即可，不需要考虑前进还是后退！！！
git help 命令 查看帮助
ls -lA 查看隐藏文件  ll .git 查看 .git文件
永久删除文件的找回 任意一个版本提交到本地库记录就是不可磨灭的
 前提：删除前，文件存在时的状态已经提交到了本地库 操作git reset --hard[指针位置]
比较文件差异  git diff 文件名 可以跟之前的版本进行比较
分支：在版本控制中，使用多条线同时推进多个任务  各个分支间独立，互不影响。分别开发各个功能
各个分支修复完后可以合并回去主干，同时并行推行多个功能开发，提高效率 某一分支开发失败后不会对其他分支造成影响
hot_fix 修饰bug分支
master本地分支    git branch创建分支 checkout 切换分支 -v查看分支
合并分支 
1.切换到接收修改的分支上、 2.执行merge命令  git merge 分支名称
分支冲突 当前分支冲突与另一分支冲突， 直接在文件中修改好即可冲突的解决

哈希原理（采用了SH1算法）： 明文 加密算法 暗文  不论数据量又多大 得到结果的长度是一定的
git通过哈希原理 来保证数据的完整性 如果数据不同，可判断文件出现了变化 ，可能会发生数据丢失！！！
保存版本差异 
1 集中式版本控制工具的文件管理机制，每次仅保留修改的部分，节约了空间
2 git管理机制  快照流 如果文件没有修改 指挥保留指向上一个存储文件的链接 保存的是快照的索引值
抽取索引构成链条   分支 ：相当于多创建了一个指针
版本管理相当于链表 切换分支相当于多创建一个指针。
git与github 进行交互。    git remote -v查看别名
git remote add 别名 远程库网址    git push 别名 分支
克隆效果 把远程库下载到本地  创建远程地址别名  初始化本地库
仓库中的settings--collaborators 可以给人全选加入队伍
pull=fetch + merge  
git fetch（抓取） [远程地址别名][远程分支名]
git merge[远程库地址别名/远程分支名]
团队协作工作一定会产生冲突
解决冲突  如果github不是最新板的修改 不能推送  
跨团队操作fork 与 pull request 直接复制远程库 修改后再进行返回 
  SSH免密登录 一个账号的话直接用SSH免密操作 不需要再次登录   







 
 